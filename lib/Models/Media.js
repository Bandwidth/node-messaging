/**
 * MessagingLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Media
 */
class Media extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.inputStream = this.constructor.getValue(obj.inputStream);
        this.content = this.constructor.getValue(obj.content);
        this.url = this.constructor.getValue(obj.url);
        this.contentLength = this.constructor.getValue(obj.contentLength);
        this.contentType = this.constructor.getValue(obj.contentType);
        this.tags = this.constructor.getValue(obj.tags);
        this.userId = this.constructor.getValue(obj.userId);
        this.mediaName = this.constructor.getValue(obj.mediaName);
        this.mediaId = this.constructor.getValue(obj.mediaId);
        this.cacheControl = this.constructor.getValue(obj.cacheControl);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'inputStream', realName: 'inputStream' },
            { name: 'content', realName: 'content' },
            { name: 'url', realName: 'url' },
            { name: 'contentLength', realName: 'contentLength' },
            { name: 'contentType', realName: 'contentType' },
            { name: 'tags', realName: 'tags', array: true, type: 'Tag' },
            { name: 'userId', realName: 'userId' },
            { name: 'mediaName', realName: 'mediaName' },
            { name: 'mediaId', realName: 'mediaId' },
            { name: 'cacheControl', realName: 'cacheControl' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Media;
